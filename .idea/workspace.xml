<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="1cf393f8-93e6-4a4a-9e0a-cef3eac10067" name="Changes" comment="added: &#10;- I'll get the index sent in the address '/: index' with&#10;- I need to check if the answer is correct but first I need to download a CURRENT question!&#10;       - however, it will not be const nextQuestion = questions [goodAnswers - 1]; because if I'm at the question with index zero&#10;- this is the next question that is my topical question! I change the name from the next question to the current question that suggests to me, i.e. 'question'&#10;- I am sending a reply, if the correct answer button has been clicked I am sending true, otherwise false">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/routes/game.js" beforeDir="false" afterPath="$PROJECT_DIR$/routes/game.js" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="HTML File" />
        <option value="JavaScript File" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectId" id="1yxL83FqZMeY90fKrCHvQUlt2Yz" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="DefaultHtmlFileTemplate" value="HTML File" />
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="node.js.detected.package.eslint" value="true" />
    <property name="node.js.detected.package.tslint" value="true" />
    <property name="node.js.selected.package.eslint" value="(autodetect)" />
    <property name="node.js.selected.package.tslint" value="(autodetect)" />
    <property name="nodejs_package_manager_path" value="npm" />
    <property name="vue.rearranger.settings.migration" value="true" />
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="1cf393f8-93e6-4a4a-9e0a-cef3eac10067" name="Changes" comment="" />
      <created>1633188130067</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1633188130067</updated>
      <workItem from="1633188132279" duration="7000" />
      <workItem from="1633188146652" duration="2424000" />
      <workItem from="1633256389569" duration="9598000" />
    </task>
    <task id="LOCAL-00001" summary="initial commit">
      <created>1633188307026</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1633188307026</updated>
    </task>
    <task id="LOCAL-00002" summary="created basic js project and added node.js">
      <created>1633188374694</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1633188374694</updated>
    </task>
    <task id="LOCAL-00003" summary="created basic js project and added node.js">
      <created>1633188453937</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1633188453938</updated>
    </task>
    <task id="LOCAL-00004" summary="created basic js project and added node.js">
      <created>1633188464285</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1633188464285</updated>
    </task>
    <task id="LOCAL-00005" summary="added .gitignore file /node_modules">
      <created>1633188540053</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1633188540053</updated>
    </task>
    <task id="LOCAL-00006" summary="added express to my new app.js file">
      <created>1633188616570</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1633188616570</updated>
    </task>
    <task id="LOCAL-00007" summary="added nodemon as devDependency">
      <created>1633188695966</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1633188695966</updated>
    </task>
    <task id="LOCAL-00008" summary="added dirs: public &amp; routes to my project and added index.html to public as simple template start site">
      <created>1633189051073</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1633189051073</updated>
    </task>
    <task id="LOCAL-00009" summary="added console.log with my site link">
      <created>1633189285818</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1633189285818</updated>
    </task>
    <task id="LOCAL-00010" summary="added changed main File from index.js to app.js. This allows me to start my app with command: nodemon app.js. it do refresh my web browser after every change in my code">
      <created>1633256577820</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1633256577820</updated>
    </task>
    <task id="LOCAL-00011" summary="added added scripts.js">
      <created>1633257927093</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1633257927093</updated>
    </task>
    <task id="LOCAL-00012" summary="added added simple frontend part to my app">
      <created>1633257976828</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1633257976828</updated>
    </task>
    <task id="LOCAL-00013" summary="added goodAnswers counter, helps and questions to my backend">
      <created>1633258035248</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1633258035248</updated>
    </task>
    <task id="LOCAL-00014" summary="added res Object, &#10;if: (all answers are correct?) Win Win&#10;else: send next question,&#10;&#10;- I restructure the nextQuestion object to be able to use the fields in the response object more easily. JSON&#10; - without destructuring I would have to use nextQuestion.question, nextQuestion.answers at the bottom,&#10;- the client (browser) would then have access to the correctAnswer field of the nextQuestion object, that we don't want">
      <created>1633259176527</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1633259176527</updated>
    </task>
    <task id="LOCAL-00015" summary="added middlewear app.use(express.static())">
      <created>1633261455279</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1633261455279</updated>
    </task>
    <task id="LOCAL-00016" summary="added function that fetch questions and function that fills dynamically question and answers into my frontend">
      <created>1633261576884</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1633261576884</updated>
    </task>
    <task id="LOCAL-00017" summary="added Changed &#10;const answerElement = document.querySelector(`#answer${Number(i) + 1}`);&#10;Iterator (i) must be a number in this case or ill get '0' + 1 = '01' !!!">
      <created>1633261785906</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1633261785906</updated>
    </task>
    <task id="LOCAL-00018" summary="added I refactored the code in such a way that my mini backend is hidden (closure) in the function. App.js (as my main function) then has no 'unnecessary' code. It becomes transparent and safer.">
      <created>1633262460394</created>
      <option name="number" value="00018" />
      <option name="presentableId" value="LOCAL-00018" />
      <option name="project" value="LOCAL" />
      <updated>1633262460394</updated>
    </task>
    <task id="LOCAL-00019" summary="added I refactored the code in such a way that my mini backend is hidden (closure) in the function. App.js (as my main function) then has no 'unnecessary' code. It becomes transparent and safer.">
      <created>1633262472088</created>
      <option name="number" value="00019" />
      <option name="presentableId" value="LOCAL-00019" />
      <option name="project" value="LOCAL" />
      <updated>1633262472088</updated>
    </task>
    <task id="LOCAL-00020" summary="added: After pressing a button, we get the response index and send it as an argument to the sendAnswer function, now need to add backend">
      <created>1633263678252</created>
      <option name="number" value="00020" />
      <option name="presentableId" value="LOCAL-00020" />
      <option name="project" value="LOCAL" />
      <updated>1633263678252</updated>
    </task>
    <task id="LOCAL-00021" summary="added: After pressing a button, we get the response index and send it as an argument to the sendAnswer function, now need to add backend">
      <created>1633263754626</created>
      <option name="number" value="00021" />
      <option name="presentableId" value="LOCAL-00021" />
      <option name="project" value="LOCAL" />
      <updated>1633263754626</updated>
    </task>
    <task id="LOCAL-00022" summary="added: &#10;- I'll get the index sent in the address '/: index' with&#10;- I need to check if the answer is correct but first I need to download a CURRENT question!&#10;       - however, it will not be const nextQuestion = questions [goodAnswers - 1]; because if I'm at the question with index zero&#10;- this is the next question that is my topical question! I change the name from the next question to the current question that suggests to me, i.e. 'question'&#10;- I am sending a reply, if the correct answer button has been clicked I am sending true, otherwise false">
      <created>1633265503353</created>
      <option name="number" value="00022" />
      <option name="presentableId" value="LOCAL-00022" />
      <option name="project" value="LOCAL" />
      <updated>1633265503353</updated>
    </task>
    <option name="localTasksCounter" value="23" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
    <option name="oldMeFiltersMigrated" value="true" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="initial commit" />
    <MESSAGE value="created basic js project and added node.js" />
    <MESSAGE value="added .gitignore file /node_modules" />
    <MESSAGE value="added express to my new app.js file" />
    <MESSAGE value="added nodemon as devDependency" />
    <MESSAGE value="added created server" />
    <MESSAGE value="added dirs: public &amp; routes to my project and added index.html to public as simple template start site" />
    <MESSAGE value="added console.log with my site link" />
    <MESSAGE value="added changed main File from index.js to app.js. This allows me to start my app with command: nodemon app.js. it do refresh my web browser after every change in my code" />
    <MESSAGE value="added added scripts.js" />
    <MESSAGE value="added added simple frontend part to my app" />
    <MESSAGE value="added goodAnswers counter, helps and questions to my backend" />
    <MESSAGE value="added res Object, &#10;if: (all answers are correct?) Win Win&#10;else: send next question,&#10;&#10;- I restructure the nextQuestion object to be able to use the fields in the response object more easily. JSON&#10; - without destructuring I would have to use nextQuestion.question, nextQuestion.answers at the bottom,&#10;- the client (browser) would then have access to the correctAnswer field of the nextQuestion object, that we don't want" />
    <MESSAGE value="added middlewear app.use(express.static())" />
    <MESSAGE value="added function that fetch questions and function that fills dynamically question and answers into my frontend" />
    <MESSAGE value="added Changed &#10;const answerElement = document.querySelector(`#answer${Number(i) + 1}`);&#10;Iterator (i) must be a number in this case or ill get '0' + 1 = '01' !!!" />
    <MESSAGE value="added I refactored the code in such a way that my mini backend is hidden (closure) in the function. App.js (as my main function) then has no 'unnecessary' code. It becomes transparent and safer." />
    <MESSAGE value="added: After pressing a button, we get the response index and send it as an argument to the sendAnswer function, now need to add backend" />
    <MESSAGE value="added: &#10;- I'll get the index sent in the address '/: index' with&#10;- I need to check if the answer is correct but first I need to download a CURRENT question!&#10;       - however, it will not be const nextQuestion = questions [goodAnswers - 1]; because if I'm at the question with index zero&#10;- this is the next question that is my topical question! I change the name from the next question to the current question that suggests to me, i.e. 'question'&#10;- I am sending a reply, if the correct answer button has been clicked I am sending true, otherwise false" />
    <option name="LAST_COMMIT_MESSAGE" value="added: &#10;- I'll get the index sent in the address '/: index' with&#10;- I need to check if the answer is correct but first I need to download a CURRENT question!&#10;       - however, it will not be const nextQuestion = questions [goodAnswers - 1]; because if I'm at the question with index zero&#10;- this is the next question that is my topical question! I change the name from the next question to the current question that suggests to me, i.e. 'question'&#10;- I am sending a reply, if the correct answer button has been clicked I am sending true, otherwise false" />
  </component>
</project>